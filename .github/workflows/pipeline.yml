name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production


jobs:
  audit:
    name: Audit
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
      APP_DEBUG: 0
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: composer:v2
      - run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php8.3-${{ hashFiles('**/composer.lock') }}
      - run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - run: |
          composer audit --no-dev --abandoned=report --ignore-severity=low --format=json --no-ansi > /tmp/security-audit.json
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report-${{ github.run_id }}
          path: /tmp/security-audit.json

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
      APP_DEBUG: 0
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: composer:v2
      - run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php8.3-${{ hashFiles('**/composer.lock') }}
      - run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - run: composer app:code-quality

  tests:
    name: Tests
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
      APP_DEBUG: 0

    needs: [audit, quality]
    if: ${{ always() && needs.audit.result == 'success' && needs.quality.result == 'success' }}
    services:
      database:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: symfony_ci_cd_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: composer:v2
      - run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV
      - uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php8.3-${{ hashFiles('**/composer.lock') }}
      - run: composer install --no-interaction --prefer-dist --optimize-autoloader
      - run: composer app:tests
        env:
          APP_ENV: test
          DATABASE_URL: "mysql://root:root@127.0.0.1:3306/symfony_ci_cd_test?serverVersion=8.0.32&charset=utf8mb4"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      APP_ENV: prod
      APP_DEBUG: 0
    needs: tests
    if: ${{ needs.tests.result == 'success' && github.ref == 'refs/heads/production' }}
    steps:
    - name: Deploy via SSH
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        port: ${{ secrets.SSH_PORT }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Autoriser le r√©pertoire Git (√©vite "dubious ownership")
          docker exec -u www-data symfony-docker-ci-cd_php_1 git config --global --add safe.directory /var/www

          # Mettre √† jour le code
          docker exec -u www-data symfony-docker-ci-cd_php_1 git pull origin production

          # üîß Corriger les permissions pour √©viter les erreurs d'acc√®s
          docker exec symfony-docker-ci-cd_php_1 chown -R www-data:www-data /var/www

          # Nettoyer vendor et lock file pour √©viter les conflits de suppression
          docker exec -u www-data symfony-docker-ci-cd_php_1 rm -rf vendor composer.lock

          # R√©installer proprement les d√©pendances
          docker exec -u www-data symfony-docker-ci-cd_php_1 composer install --no-dev --optimize-autoloader

          # Base de donn√©es
          docker exec -u www-data symfony-docker-ci-cd_php_1 php bin/console doctrine:database:create --if-not-exists
          docker exec -u www-data symfony-docker-ci-cd_php_1 php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration

          # Compilation des assets
          docker exec -u www-data symfony-docker-ci-cd_php_1 php bin/console asset-map:compile

          # Nettoyage du cache
          docker exec -u www-data symfony-docker-ci-cd_php_1 php bin/console cache:clear --env=prod
          docker exec -u www-data symfony-docker-ci-cd_php_1 php bin/console cache:warmup --env=prod
          docker exec -u www-data symfony-docker-ci-cd_php_1 php bin/console assets:install --symlink --relative --env=prod

