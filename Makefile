# Makefile pour Symfony Docker CI/CD
# Simplifie les commandes Docker Compose courantes

.PHONY: help build up down restart logs shell test quality audit clean install migrate assets

# Couleurs pour les messages
GREEN=\033[0;32m
YELLOW=\033[1;33m
RED=\033[0;31m
NC=\033[0m # No Color

# Variables
DOCKER_COMPOSE = docker compose
PHP_CONTAINER = php
DATABASE_CONTAINER = database

## Affiche cette aide
help:
	@echo "$(GREEN)Commandes disponibles pour Symfony Docker CI/CD:$(NC)"
	@echo ""
	@echo "$(YELLOW)üê≥ Docker:$(NC)"
	@echo "  build         Construire les conteneurs"
	@echo "  up            D√©marrer les services"
	@echo "  down          Arr√™ter les services"
	@echo "  restart       Red√©marrer les services"
	@echo "  logs          Afficher les logs"
	@echo ""
	@echo "$(YELLOW)üîß D√©veloppement:$(NC)"
	@echo "  setup         Configuration compl√®te de l'environnement"
	@echo "  shell         Acc√©der au conteneur PHP"
	@echo "  install       Installer les d√©pendances"
	@echo "  migrate       Migrer la base de donn√©es"
	@echo "  assets        Compiler les assets"
	@echo "  cache-clear   Vider le cache"
	@echo ""
	@echo "$(YELLOW)üß™ Qualit√©:$(NC)"
	@echo "  test          Lancer les tests"
	@echo "  quality       V√©rifier la qualit√© du code"
	@echo "  audit         Audit de s√©curit√©"
	@echo "  fix           Corriger le style de code"
	@echo ""
	@echo "$(YELLOW)üßπ Maintenance:$(NC)"
	@echo "  clean         Nettoyer Docker"
	@echo "  reset         Reset complet"
	@echo ""
	@echo "$(YELLOW)üöÄ D√©ploiement:$(NC)"
	@echo "  deploy        Lancer le script de d√©ploiement"
	@echo "  deploy-test   Tester le d√©ploiement localement"
	@echo "  test-deploy   Test complet avec environnement simul√©"

## üê≥ DOCKER

## Construire les conteneurs
build:
	@echo "$(GREEN)üèóÔ∏è Construction des conteneurs...$(NC)"
	$(DOCKER_COMPOSE) build --no-cache

## D√©marrer les services
up:
	@echo "$(GREEN)üöÄ D√©marrage des services...$(NC)"
	$(DOCKER_COMPOSE) up -d

## Arr√™ter les services
down:
	@echo "$(YELLOW)üõë Arr√™t des services...$(NC)"
	$(DOCKER_COMPOSE) down

## Red√©marrer les services
restart: down up

## Afficher les logs
logs:
	$(DOCKER_COMPOSE) logs -f

## üîß D√âVELOPPEMENT

## Configuration compl√®te de l'environnement
setup: build up install migrate assets cache-clear
	@echo "$(GREEN)‚úÖ Environnement configur√© avec succ√®s!$(NC)"
	@echo "$(GREEN)üåê Application disponible sur: http://localhost$(NC)"
	@echo "$(GREEN)üóÑÔ∏è PHPMyAdmin disponible sur: http://localhost:8080$(NC)"

## Acc√©der au conteneur PHP
shell:
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) bash

## Installer les d√©pendances
install:
	@echo "$(GREEN)üì¶ Installation des d√©pendances...$(NC)"
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) composer install

## Migrer la base de donn√©es
migrate:
	@echo "$(GREEN)üóÑÔ∏è Migration de la base de donn√©es...$(NC)"
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:database:create --if-not-exists
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console doctrine:migrations:migrate --no-interaction

## Compiler les assets
assets:
	@echo "$(GREEN)üé® Compilation des assets...$(NC)"
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console asset-map:compile
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console assets:install

## Vider le cache
cache-clear:
	@echo "$(GREEN)üßπ Nettoyage du cache...$(NC)"
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console cache:clear

## üß™ QUALIT√â

## Lancer les tests
test:
	@echo "$(GREEN)üß™ Lancement des tests...$(NC)"
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) composer app:tests

## V√©rifier la qualit√© du code
quality:
	@echo "$(GREEN)üîç V√©rification de la qualit√© du code...$(NC)"
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) composer app:code-quality

## Audit de s√©curit√©
audit:
	@echo "$(GREEN)üõ°Ô∏è Audit de s√©curit√©...$(NC)"
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) composer audit

## Corriger le style de code
fix:
	@echo "$(GREEN)üîß Correction du style de code...$(NC)"
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) vendor/bin/ecs --fix

## üßπ MAINTENANCE

## Nettoyer Docker
clean:
	@echo "$(YELLOW)üßπ Nettoyage de Docker...$(NC)"
	docker system prune -f
	docker volume prune -f

## Reset complet
reset: down clean
	@echo "$(RED)üîÑ Reset complet...$(NC)"
	docker compose down -v
	docker system prune -af
	@echo "$(GREEN)‚úÖ Reset termin√©. Lancez 'make setup' pour reconfigurer.$(NC)"

## Commandes rapides
db-shell:
	$(DOCKER_COMPOSE) exec $(DATABASE_CONTAINER) mysql -u root -p

console:
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) php bin/console

composer:
	$(DOCKER_COMPOSE) exec $(PHP_CONTAINER) composer $(filter-out $@,$(MAKECMDGOALS))

# Emp√™cher make de traiter les arguments comme des cibles
%:
	@:

## üöÄ D√âPLOIEMENT

## Lancer le script de d√©ploiement
deploy:
	@echo "$(GREEN)üöÄ Lancement du d√©ploiement en production...$(NC)"
	@if [ -f "./deploy.sh" ]; then \
		chmod +x ./deploy.sh && ./deploy.sh; \
	else \
		echo "$(RED)‚ùå Script deploy.sh non trouv√©$(NC)"; \
		exit 1; \
	fi

## Tester le d√©ploiement localement (simulation)
deploy-test:
	@echo "$(GREEN)üß™ Test du script de d√©ploiement...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Mode test - aucune modification r√©elle$(NC)"
	@if [ -f "./deploy.sh" ]; then \
		chmod +x ./deploy.sh && bash -n ./deploy.sh && echo "$(GREEN)‚úÖ Script valide$(NC)"; \
	else \
		echo "$(RED)‚ùå Script deploy.sh non trouv√©$(NC)"; \
		exit 1; \
	fi

## Test complet avec environnement simul√©
test-deploy:
	@echo "$(GREEN)üß™ Test complet du d√©ploiement...$(NC)"
	@if [ -f "./test-deploy.sh" ]; then \
		chmod +x ./test-deploy.sh && ./test-deploy.sh; \
	else \
		echo "$(RED)‚ùå Script test-deploy.sh non trouv√©$(NC)"; \
		exit 1; \
	fi
